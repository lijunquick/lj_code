package com.asj.pls.activity;

import org.json.JSONArray;
import org.json.JSONException;

import com.asj.pls.R;
import com.asj.pls.util.JSONUtils;
import com.asj.pls.util.KeyBoardUtils;
import com.asj.pls.util.SPUtils;
import com.asj.pls.view.AutoNewLineView;

import android.app.Activity;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

public class SearchActivity extends Activity implements OnClickListener, OnFocusChangeListener, TextWatcher{

	/**
     * 控件是否有焦点
     */
    private boolean hasFoucs;
    
    /**
	 * 删除按钮的引用
	 */
    private Drawable mClearDrawable;
	
	/** 
     * 返回
     */
    private ImageView backImageSearch;
    
    /** 
     * 搜索
     */
    private EditText searchCondition;
    
    /** 
     * 确定搜索
     */
    private TextView searchSure;
    
    /** 
     * 热门搜索控件
     */
    private AutoNewLineView hotWords;
    
    /** 
     * 热门搜索
     */
    private LinearLayout hotSearchPlace;
    
    /** 
     * 历史搜索
     */
    private LinearLayout recordWords;
    
    /** 
     * 清除历史数据
     */
    private Button clearRecord;
    
    private String dataJson ="{'data':['可乐','烧烤','雪碧','西红柿','牛奶','巧克力','必胜客'],'errorInfo':'请求成功','errorNo':0}";
    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_search);
		initViews();
	}
	
	/** 
     * 在这里获取到每个需要用到的控件的实例，并给它们设置好必要的点击事件。 
     */  
    private void initViews() {
    	
    	backImageSearch = (ImageView)findViewById(R.id.back_index_search);
    	searchCondition = (EditText)findViewById(R.id.search_condition);
    	searchSure = (TextView)findViewById(R.id.search_sure);
    	hotWords = (AutoNewLineView)findViewById(R.id.hot_words_view);
    	hotSearchPlace = (LinearLayout)findViewById(R.id.hot_words_place);
    	recordWords = (LinearLayout)findViewById(R.id.record_words_view);
    	clearRecord = (Button)findViewById(R.id.clear_record_words);
    	new Thread(new Runnable() {
        	
			@Override
			public void run() {
				// TODO Auto-generated method stub
				try {
    				Thread.sleep(2000);
    			} catch (Exception e) {
    				e.printStackTrace();
    			}
				Message msg = new Message();
				msg.obj = dataJson;
				mHandler.sendMessage(msg);
			}
			
        }).start();
    	
    	mClearDrawable = searchCondition.getCompoundDrawables()[2];
        if (mClearDrawable == null) {
        	mClearDrawable = getResources().getDrawable(R.drawable.delete_selector); //图片样式
        }
        mClearDrawable.setBounds(0, 0, mClearDrawable.getIntrinsicWidth(), mClearDrawable.getIntrinsicHeight());
        setClearIconVisible(false);//默认设置隐藏图标
        recordSearchWordInit();//热门搜索词
        searchSure.setOnClickListener(this);
        clearRecord.setOnClickListener(this);
    	backImageSearch.setOnClickListener(this);
    	searchCondition.setOnClickListener(this);
    	searchCondition.setOnFocusChangeListener(this);//设置焦点改变的监听
    	searchCondition.addTextChangedListener(this);//设置输入框里面内容发生改变的监听
    	searchCondition.setOnTouchListener(new OnTouchListener() {//设置输入清空的监听

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				if (event.getAction() == MotionEvent.ACTION_UP) {
					if (searchCondition.getCompoundDrawables()[2] != null) {
						
						boolean touchable = event.getX() > (searchCondition.getWidth() - searchCondition.getTotalPaddingRight())
								&& (event.getX() < ((searchCondition.getWidth() - searchCondition.getPaddingRight())));
						
						if (touchable) {
							searchCondition.setText("");
						}
					}
				}
				return false;
			}
    		
    	});
    	
    	searchCondition.setOnEditorActionListener(new OnEditorActionListener() {//设置键盘回车的监听
			
			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				// TODO Auto-generated method stub
				searchWord(searchCondition.getText().toString());
				return false;
			}
			
		});
    	
    	KeyBoardUtils.openKeybord(searchCondition, this);
    }

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch(v.getId()){
		case R.id.back_index_search:
			KeyBoardUtils.closeKeybord(searchCondition, this);
			this.finish();
			this.overridePendingTransition(R.anim.push_current, R.anim.push_right_out);
			break;
		case R.id.search_sure:
			searchWord(searchCondition.getText().toString());
			break;
		case R.id.clear_record_words:
			SPUtils.remove("recordSearch", this);
			recordWords.removeAllViews();
			findViewById(R.id.search_record_place).setVisibility(View.GONE);
			break;
		}
	}

	@Override
	public void onFocusChange(View v, boolean hasFocus) {
		// TODO Auto-generated method stub
		this.hasFoucs = hasFocus;
        if (hasFocus) { 
            setClearIconVisible(searchCondition.getText().length() > 0); 
        } else { 
            setClearIconVisible(false); 
        }
	}

	@Override
	public void onTextChanged(CharSequence s, int start, int before, int count) {
		// TODO Auto-generated method stub
		if(hasFoucs){
    		setClearIconVisible(s.length() > 0);
    	}
	}
	
	@Override
	public void beforeTextChanged(CharSequence s, int start, int count, int after) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void afterTextChanged(Editable s) {
		// TODO Auto-generated method stub
		
	}
	
	/**
     * 设置清除图标的显示与隐藏，调用setCompoundDrawables为EditText绘制上去
     * @param visible
     */
    protected void setClearIconVisible(boolean visible) {
        Drawable right = visible ? mClearDrawable : null;
        searchCondition.setCompoundDrawables(searchCondition.getCompoundDrawables()[0], searchCondition.getCompoundDrawables()[1], right, searchCondition.getCompoundDrawables()[3]);
    }
    
    
    protected void recordSearchWordInit(){
    	String exitRecordWors = (String) SPUtils.get("recordSearch", "", this);
    	if(exitRecordWors != null && !exitRecordWors.equals("")){
    		String[] wordsArray = exitRecordWors.split(",");
    		for(String item : wordsArray){
    			final TextView itemView = new TextView(getApplicationContext());
    			itemView.setText(item);
    			itemView.setTextSize(13);
    			itemView.setTextColor(this.getResources().getColor(R.color.pls_bg));
    			itemView.setBackgroundResource(R.drawable.record_search_text_view);
    			itemView.setClickable(true);
    			itemView.setPadding(10, 15, 10, 15);
    			itemView.setOnClickListener(new OnClickListener() {
    				@Override
    				public void onClick(View v) {
    					// TODO Auto-generated method stub
    					searchWord(itemView.getText().toString());
    				}
    			});
        		recordWords.addView(itemView);
    		}
        	findViewById(R.id.search_record_place).setVisibility(View.VISIBLE);
    	}
    }
    
    /**
     * 搜索操作
     */
    protected void searchWord(String words){
    	if(words != null){
    		StringBuffer storeWords = new StringBuffer();
    		String exitRecordWors = (String) SPUtils.get("recordSearch", "", this);
    		if(exitRecordWors != null && !exitRecordWors.equals("")){
    			Integer size = 0;
    			String[] wordsArray = exitRecordWors.split(",");
    			for(int i = 1; i <= wordsArray.length; i++){
    				if(wordsArray[i-1].equals(words)){
						size = i;
					}
    			}
    			storeWords = storeWords.append(words);
    			if(size != 0){
    				for(int i = 1; i <= wordsArray.length; i++){
						if(i != size){
							storeWords = storeWords.append(",").append(wordsArray[i-1]);
						}
						if(wordsArray.length == 5){
							break;
						}
					}
    			}if(size == 0){
    				for(int i = 1; i <= wordsArray.length; i++){
    					storeWords = storeWords.append(",").append(wordsArray[i-1]);
    					if(wordsArray.length == 5){
							break;
						}
    				}
    			}
    		}else{
    			storeWords = storeWords.append(words);
    		}
    		SPUtils.put("recordSearch", storeWords.toString(), this);
    	}
    }
    
    private Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			String jsonStr = (String) msg.obj;
			try {
				JSONArray searchArray = JSONUtils.parseJsonMulti(jsonStr, "data");
				if(searchArray != null && searchArray.length() > 0){
					for(int i = 0; i < searchArray.length(); i++){
			    		final TextView item = new TextView(getApplicationContext());
			    		item.setText(searchArray.getString(i));
			    		item.setTextSize(12);
			    		item.setTextColor(Color.parseColor("#271553"));
			    		item.setBackgroundResource(R.drawable.hot_search_text_view);
			    		item.setClickable(true);
			    		item.setOnClickListener(new OnClickListener() {
							
							@Override
							public void onClick(View v) {
								// TODO Auto-generated method stub
								searchWord(item.getText().toString());
							}
						});
			    		
			    		hotWords.addView(item);
			    	}
					hotSearchPlace.setVisibility(View.VISIBLE);
					hotWords.setVisibility(View.VISIBLE);
				}
			} catch (JSONException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
			}
		};
		
	};
}
