package com.asj.pls.fragment;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import com.asj.pls.R;
import com.asj.pls.activity.LocationActivity;
import com.asj.pls.activity.SearchActivity;
import com.asj.pls.adapter.ViewPagerAdapter;
import com.asj.pls.util.LOGUtils;
import com.asj.pls.util.SPUtils;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageView.ScaleType;

public class MyTabFragmentOne extends Fragment implements OnClickListener{

	/** 
     * 首页
     */
	private View indexLayout;
	
	/** 
     * 位置状态栏
     */
    private TextView addressText;
    
    /** 
     * 定位按钮
     */
    private Button locationBtn;
	
    /** 
     * 商品搜索图标
     */
    private ImageView searchPdImage;
    
    /** 
	  * 定位核心sdk
	  */
	private LocationClient mLocationClient;
	
	/** 
     * 定义ViewPager对象
     */
	private ViewPager viewPager;
		
	/** 
     * 定义ViewPager适配器
     */
	private ViewPagerAdapter vpAdapter;
	
	/** 
     * 定义一个ArrayList来存放View
     */
    private ArrayList<View> views;
    
    /** 
     * 放圆点的View的list
     */
    private List<View> dotViewsList;
    
    /** 
     * 记录当前选中位置
     */
    private int currentIndex;
    
    /** 
     * 记录当前选中位置
     */
    private boolean isAutoPlay = true;
    
    /** 
     * 定时任务
     */
    private ScheduledExecutorService scheduledExecutorService;
    
    /** 
     * 图片资源
     */
    private String[] imageUrls = {"http://image.asj.com/o2oImageAd/2015/5/24/20/08232514324702051688406185512.jpg","http://image.asj.com/o2oImageAd/2015/5/24/20/08272714324704473547639274908.jpg","http://image.asj.com/o2oImageAd/2015/5/25/10/10483914325221197047443989444.jpg"};
	 
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {  
        indexLayout = inflater.inflate(R.layout.layout_index, container, false);
        
        addressText = (TextView)indexLayout.findViewById(R.id.search_address_txt);
        searchPdImage = (ImageView)indexLayout.findViewById(R.id.index_search_image);
        locationBtn = (Button)indexLayout.findViewById(R.id.index_locatin_btn);
        //初始化界面
    	viewPager = (ViewPager) indexLayout.findViewById(R.id.slide_show_viewPager);//实例化ViewPager
    	viewPager.setFocusable(true);
    	
        if(!isLocation()){//网络状态正常且第一次定位
			mLocationClient = new LocationClient(indexLayout.getContext().getApplicationContext());//实例化LocationClient类
			mLocationClient.registerLocationListener(new MyLocationListener());//注册监听函数
			this.InitLocation();//设置定位参数
			mLocationClient.start();
        }else{
        	String currentAddress = (String) SPUtils.get("isLocation", "请选择..", getActivity());
        	if(!currentAddress.equals("请选择..")){
        		currentAddress = "送至   " + currentAddress;
        	}
        	addressText.setText(currentAddress);
		}
        locationBtn.setOnClickListener(this);
        addressText.setOnClickListener(this);
        searchPdImage.setOnClickListener(this);
        return indexLayout;  
    }

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		Intent intent = null;
		switch(v.getId()){
		case R.id.index_search_image://商品搜索
			intent = new Intent(getActivity(),SearchActivity.class);
			startActivity(intent);
			getActivity().overridePendingTransition(R.anim.push_right_in, R.anim.push_current);
			break;
		default://定位
			intent = new Intent(getActivity(),LocationActivity.class);
			startActivityForResult(intent,1);
			getActivity().overridePendingTransition(R.anim.push_up_in, R.anim.push_current);
		}
	}
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
        addressText.setText("送至   " + SPUtils.get("isLocation", "请选择..", getActivity()));
        String id = data.getExtras().getString("result");
        String exitId = (String) SPUtils.get("shop_id", "0", getActivity());
        
        if(!id.equals(exitId)){
        	SPUtils.put("shop_id", id, getActivity());
        	initSlideShow(null);
        }
    }
	
	/**
	  * 定位
	  */
	 private void InitLocation(){
		LocationClientOption option = new LocationClientOption();
		option.setAddrType("all");
		option.setLocationMode(LocationMode.Hight_Accuracy);//设置定位模式
		option.setCoorType("gcj02");//返回的定位结果是百度经纬度，默认值gcj02
		option.setScanSpan(5000);//设置发起定位请求的间隔时间为5000ms
		option.setIsNeedAddress(true);
		mLocationClient.setLocOption(option);
	}
	    
	/**
	 * 实现实位回调监听
	 */
	public class MyLocationListener implements BDLocationListener {

		@Override
		public void onReceiveLocation(BDLocation location) {
			//Receive Location
			if(location != null && location.getStreet() != null){
				SPUtils.put("isLocation", location.getStreet(), getActivity());
				LOGUtils.d("location", location.getStreet());
				addressText.setText("送至   " + location.getStreet());
			}else{
				addressText.setText("请选择..");
			}
			mLocationClient.stop();
		}
	}
		
	/** 
	 * 判断是否第一次定位
	 */
	private boolean isLocation() {
		boolean isFirstRun = SPUtils.contains("isLocation",getActivity());
		return isFirstRun;
	}
	
	/** 
	 * 动作定位
	 */
	public void selfLocation(){
		mLocationClient.start();
	}
	
	/** 
	 * 加载轮播
	 */
	public void initSlideShow(Long shopId){
		
		//初始化数据
		views = new ArrayList<View>();
		dotViewsList = new ArrayList<View>();
        LinearLayout dotLayout = (LinearLayout)indexLayout.findViewById(R.id.dotLayout);
        dotLayout.removeAllViews();
        
    	for (int i = 0; i < imageUrls.length; i++) {
    		ImageView view = new ImageView(getActivity());
    		if(i==0) view.setBackgroundResource(R.drawable.default_banner);//给一个默认图
    		view.setTag(imageUrls[i]);
    		view.setScaleType(ScaleType.FIT_XY);
	        views.add(view);
	        
	        ImageView dotView = new ImageView(getActivity());
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
            params.leftMargin = 4;
            params.rightMargin = 4;
            dotLayout.addView(dotView, params);
            dotViewsList.add(dotView);
    	}
    	vpAdapter = new ViewPagerAdapter(views,getActivity());//实例化ViewPager适配器
    	this.vpAdapter.notifyDataSetChanged();
	    viewPager.setAdapter(vpAdapter);//设置数据
	    if(isAutoPlay){
            startPlay();
        }
	    
	    viewPager.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				switch(event.getAction()){
				case MotionEvent.ACTION_DOWN:
					viewPager.getParent().requestDisallowInterceptTouchEvent(true);
					break;
				case MotionEvent.ACTION_MOVE:
					viewPager.getParent().requestDisallowInterceptTouchEvent(true);
					break;
				case MotionEvent.ACTION_UP:
					viewPager.getParent().requestDisallowInterceptTouchEvent(false);
					break;
				case MotionEvent.ACTION_CANCEL:
					viewPager.getParent().requestDisallowInterceptTouchEvent(false);
					break;
				}
				return false;
			}
		});
	    
	    viewPager.setOnPageChangeListener(new OnPageChangeListener() {
			
			@Override
			public void onPageSelected(int pos) {
				// TODO Auto-generated method stub
				currentIndex = pos;
	            for(int i=0;i < dotViewsList.size();i++){
	                if(i == pos){
	                	((View)dotViewsList.get(pos)).setBackgroundResource(R.drawable.point_select);
	                }else {
	                    ((View)dotViewsList.get(i)).setBackgroundResource(R.drawable.point_normal);
	                }
	            }
			}
			
			@Override
			public void onPageScrolled(int arg0, float arg1, int arg2) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onPageScrollStateChanged(int arg0) {
				// TODO Auto-generated method stub
				switch (arg0) {
	            case 1:// 手势滑动，空闲中
	                isAutoPlay = false;
	                break;
	            case 2:// 界面切换中
	                isAutoPlay = true;
	                break;
	            case 0:// 滑动结束，即切换完毕或者加载完毕
	                // 当前为最后一张，此时从右向左滑，则切换到第一张
	                if (viewPager.getCurrentItem() == viewPager.getAdapter().getCount() - 1 && !isAutoPlay) {
	                    viewPager.setCurrentItem(0);
	                }
	                // 当前为第一张，此时从左向右滑，则切换到最后一张
	                else if (viewPager.getCurrentItem() == 0 && !isAutoPlay) {
	                    viewPager.setCurrentItem(viewPager.getAdapter().getCount() - 1);
	                }
	                break;
	            }
			}
		});
	    
	    
	}

	
	/**
     * 开始轮播图切换
     */
    private void startPlay(){
        scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
        scheduledExecutorService.scheduleAtFixedRate(new SlideShowTask(), 1, 4, TimeUnit.SECONDS);
    }
    
    /**
     * 停止轮播图切换
     */
    private void stopPlay(){
        scheduledExecutorService.shutdown();
    }
    
    /**
     *执行轮播图切换任务
     *
     */
    private class SlideShowTask implements Runnable{
    	
        @Override
        public void run() {
            // TODO Auto-generated method stub
            synchronized (viewPager) {
            	currentIndex = (currentIndex+1)%views.size();
                handler.obtainMessage().sendToTarget();
            }
        }
        
    }
    
    private Handler handler = new Handler(){
    	
        @Override  
        public void handleMessage(Message msg) {
            // TODO Auto-generated method stub
            super.handleMessage(msg);
            viewPager.setCurrentItem(currentIndex);
        }
        
    };  
}
