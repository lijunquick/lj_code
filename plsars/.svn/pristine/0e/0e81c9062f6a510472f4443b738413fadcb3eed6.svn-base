package com.asj.pls.activity;

import com.asj.pls.R;
import com.asj.pls.util.KeyBoardUtils;

import android.app.Activity;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnTouchListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

public class LocationActivity extends Activity implements OnClickListener, OnFocusChangeListener, TextWatcher{

	/**
     * 控件是否有焦点
     */
    private boolean hasFoucs;
    
	/** 
     * 返回
     */
    private ImageView backImageLoc;
    
    /** 
     * 定位
     */
    private EditText locationCondition;
    
    /**
	 * 删除按钮的引用
	 */
    private Drawable mClearDrawable;
    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_location);
		initViews();
	}
	
	/** 
     * 在这里获取到每个需要用到的控件的实例，并给它们设置好必要的点击事件。 
     */  
    private void initViews() {
    	
    	
    	backImageLoc = (ImageView)findViewById(R.id.back_index_location);
    	locationCondition = (EditText)findViewById(R.id.location_condition);
    	
    	mClearDrawable = locationCondition.getCompoundDrawables()[2];
        if (mClearDrawable == null) {
        	mClearDrawable = getResources().getDrawable(R.drawable.delete_selector); //图片样式
        }
        mClearDrawable.setBounds(0, 0, mClearDrawable.getIntrinsicWidth(), mClearDrawable.getIntrinsicHeight());
        
    	backImageLoc.setOnClickListener(this);
    	
    	locationCondition.setOnClickListener(this);
    	locationCondition.setOnFocusChangeListener(this);//设置焦点改变的监听
    	locationCondition.addTextChangedListener(this);//设置输入框里面内容发生改变的监听
    	locationCondition.setOnTouchListener(new OnTouchListener() {//设置输入清空的监听

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				if (event.getAction() == MotionEvent.ACTION_UP) {
					if (locationCondition.getCompoundDrawables()[2] != null) {
						
						boolean touchable = event.getX() > (locationCondition.getWidth() - locationCondition.getTotalPaddingRight())
								&& (event.getX() < ((locationCondition.getWidth() - locationCondition.getPaddingRight())));
						
						if (touchable) {
							locationCondition.setText("");
						}
					}
				}
				return false;
			}
    		
    	});
    	locationCondition.setOnEditorActionListener(new OnEditorActionListener() {//设置键盘回车的监听
			
			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				// TODO Auto-generated method stub
				return false;
			}
			
		});
    	
    	KeyBoardUtils.openKeybord(locationCondition, this);
    }

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch(v.getId()){
		case R.id.back_index_location:
			KeyBoardUtils.closeKeybord(locationCondition, this);
			this.finish();
			this.overridePendingTransition(R.anim.push_current, R.anim.push_up_out);
			break;
		}
	}

	@Override
	public void onTextChanged(CharSequence s, int start, int before, int count) {
		// TODO Auto-generated method stub
		if(hasFoucs){
    		setClearIconVisible(s.length() > 0);
    	}
	}

	@Override
	public void onFocusChange(View v, boolean hasFocus) {
		// TODO Auto-generated method stub
		this.hasFoucs = hasFocus;
        if (hasFocus) { 
            setClearIconVisible(locationCondition.getText().length() > 0); 
        } else { 
            setClearIconVisible(false); 
        }
	}
	
	@Override
	public void beforeTextChanged(CharSequence s, int start, int count,
			int after) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void afterTextChanged(Editable s) {
		// TODO Auto-generated method stub
		
	}
	
	/**
     * 设置清除图标的显示与隐藏，调用setCompoundDrawables为EditText绘制上去
     * @param visible
     */
    protected void setClearIconVisible(boolean visible) {
        Drawable right = visible ? mClearDrawable : null;
        locationCondition.setCompoundDrawables(locationCondition.getCompoundDrawables()[0], locationCondition.getCompoundDrawables()[1], right, locationCondition.getCompoundDrawables()[3]);
        if(visible == Boolean.FALSE){
        	
        }
    }
}
